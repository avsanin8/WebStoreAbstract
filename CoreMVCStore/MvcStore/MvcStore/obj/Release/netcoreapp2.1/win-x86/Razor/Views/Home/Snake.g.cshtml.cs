#pragma checksum "I:\_GitHub\WebStoreAbstract\CoreMVCStore\MvcStore\MvcStore\Views\Home\Snake.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ae7441fe4053e9a5a7136319f1c452fa063fff3f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Snake), @"mvc.1.0.view", @"/Views/Home/Snake.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Snake.cshtml", typeof(AspNetCore.Views_Home_Snake))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "I:\_GitHub\WebStoreAbstract\CoreMVCStore\MvcStore\MvcStore\Views\_ViewImports.cshtml"
using MvcStore;

#line default
#line hidden
#line 2 "I:\_GitHub\WebStoreAbstract\CoreMVCStore\MvcStore\MvcStore\Views\_ViewImports.cshtml"
using MvcStore.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ae7441fe4053e9a5a7136319f1c452fa063fff3f", @"/Views/Home/Snake.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6594602b1713d651bae1754f58ab5162f08955a1", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Snake : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "I:\_GitHub\WebStoreAbstract\CoreMVCStore\MvcStore\MvcStore\Views\Home\Snake.cshtml"
  
    ViewData["Title"] = "Snake";

#line default
#line hidden
            BeginContext(43, 11252, true);
            WriteLiteral(@"
<style>
        html, body {
            padding: 20px;
            margin: 0;
        }

        .container {
            width: 1700px; /*/ small fix for canvas snake before width: 1170px;/*/
        }


        * {
            box-sizing: border-box;
        }

        body {
            background: #ddd;
            padding: 10px;
        }

        canvas {
            background: black;
            padding: 0;
            margin: 0 auto;
            display: block;
        }

        .groupDiv {
            float: right;
            font-size: 20px;
            font-family: Pompadur, 'Comic Sans MS', cursive;
            letter-spacing: 1px;
        }

        button {
            background-color: #ABCDEF;
            float: left;
            padding: 6px 16px;
            text-align: center;
            /* display: inline-table; */
            font-size: 14px;
            margin: 4px 2px;
            cursor: pointer;
            -webkit-transition-duration:");
            WriteLiteral(@" 0.4s; /* Safari */
            transition-duration: 1.4s;
            box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24),0 17px 50px 0 rgba(0,0,0,0.19);
        }
</style>

    <h1>Snake (the game). To control, use the arrow keys and avoid collision with your own tail.</h1>
    <h6>An example of an interesting game ""Snake"" on pure JavaScript (without frameworks and libraries)</h6>

    <div class='groupDiv'>
        <div id='apples'></div>
        <div id='tail'></div>
        <div id='speed'></div>
        <div id='total'></div>
        <button id=""pause"" onclick=""pauseFunction()"">pause</button>
    </div>
    <canvas id=""mc"" width=""1280"" height=""720""></canvas>

    <script>
        //for button ""Resume"" || ""Pause""
        var pause = 0;
        var counter=setInterval(loop, 1000/60); //60 FPS

        window.onload = function(){
            document.addEventListener('keydown', changeDirection);
        }

        function pauseFunction()
        {
            if (pause==0)
           ");
            WriteLiteral(@" {
                clearInterval(counter);
                document.getElementById(""pause"").innerHTML=""Resume"";
                pause=1;
                return;
            }

            if (pause==1)
            {
                window.counter=setInterval(loop, 1000/60);
                document.getElementById(""pause"").innerHTML=""Pause"";
                pause=0;
                return;
            }

        }

        // Init variables
        var
        canv                = document.getElementById('mc'), // canvas
        ctx                 = canv.getContext('2d'), // 2d context
        gs = fkp            = false, // game started && first key pressed (initialization states)
        speed = baseSpeed   = 3, // snake movement speed
        xv = yv             = 0, // velosity (x & y )
        px                  = ~~(canv.width) / 2, // player X position
        py                  = ~~(canv.height) / 2, // player Y position
        pw = ph             = 20, // player size
  ");
            WriteLiteral(@"      aw = ah             = 20, // apple size
        apples              = [], // apples list
        trail               = [], // trail elements list (aka trail)
        tail                = 100, // tail size (1 for 10)
        tailSafeZone        = 20, // self eating protection for head zone (aka safeZone)
        cooldown            = false, // is key in cooldown mode ()
        scoreApplesText     = document.getElementById('apples'), // score Id
        tailText            = document.getElementById('tail'), // tail Id
        speedText           = document.getElementById('speed'), // speed Id
        maxTotalText        = document.getElementById('total'), // total Id
        score               = 0, // current score
        total               = 0, // total score
        maxTotal            = 0, // max score
        currColor           = 'lime'; // color by default

        // game main loop
        function loop()
        {
            // draw score
            scoreApplesText.innerH");
            WriteLiteral(@"TML = ""Apples: ""+score;
            tailText.innerHTML = ""Tail length: ""+tail/10;
            speedText.innerHTML = ""Current speed: ""+speed.toFixed(1);
            total = Math.round((score + tail/10) * 100 / 2);
            if (total >= maxTotal)
            {
                maxTotal = total;
                maxTotalText.innerHTML = ""maxTotal score: ""+maxTotal;
            }

            // logic
            ctx.fillStyle = 'black';
            ctx.fillRect(0, 0, canv.width, canv.height);

            // force speed
            px += xv;
            py += yv;

            // teleports (1-px small fix for conditions == 0 && ==width && ==height)
            if ( px > canv.width )
                { px = 1; }

            if ( px + pw < 0 )
                { px = canv.width-1; }

            if ( py + ph < 0 )
                { py = canv.height-1; }

            if ( py > canv.height )
                { py = 1; }

            // paint the snake itself with the tail elements
     ");
            WriteLiteral(@"       ctx.fillStyle = currColor;

            for (var i = 0; i < trail.length; i++)
            {

                ctx.fillStyle = trail[i].color = currColor; //  paint the snake with currColor
                ctx.fillRect(trail[i].x, trail[i].y, pw, ph );

            }

            trail.push({x:px, y:py, color: ctx.fillStyle});

            // limiter
            if ( trail.length > tail )
            {
                trail.shift();
            }

            // eaten
            if ( trail.length > tail )
            {
                trail.shift();
            }

            // self collisions
            if ( trail.length >= tail && gs )
            {
                for (var i = trail.length - tailSafeZone; i >= 0; i-- )
                {
                    if(
                        px < (trail[i].x + pw)
                        && px + pw > trail[i].x
                        && py < (trail[i].y + ph)
                        && py + ph > trail[i].y
              ");
            WriteLiteral(@"      )
                    {
                        // got collision
                        tail = 10; // cut the tail
                        speed = baseSpeed; // cut the speed (flash no more lol xD)

                        for ( var t = 0; t < trail.length; t++)
                        {
                            // highlight loosed area
                            trail[t].color = 'red';
                            ctx.fillStyle = trail[t].color; // Try fix red
                            ctx.fillRect(trail[t].x, trail[t].y, pw, ph );
                            score = 0;
                            scoreApplesText.innerHTML = ""CRASH!!!"";
                            if ( t >= trail.length - tail )
                                {break;}
                        }

                    }
                }
            }

            // paint apples
            for ( var a = 0; a < apples.length; a++ )
            {
                ctx.fillStyle = apples[a].color;
            ");
            WriteLiteral(@"    ctx.fillRect(apples[a].x, apples[a].y, aw, ah);
            }

            // chek for snake head collisions with apples
            for (var a = 0; a < apples.length; a++)
            {
                if (
                    px < (apples[a].x + pw)
                    && px + pw > apples[a].x
                    && py < (apples[a].y + ph)
                    && py + ph > apples[a].y
                )
                {
                    // got collision with apple
                    for (var i = 0; i < trail.length; i++)
                    {
                        if (trail[i].color !== '#000000' || trail[i].color !== '#FF0000')
                        {
                            trail[i].color = apples[a].color; // set color this snake like color this apple
                            currColor = apples[a].color;
                        }

                    }
                    apples.splice(a, 1); // remove this apple from the apples list
                    score++; ");
            WriteLiteral(@"// set score
                    tail +=10; // add tail length
                    speed += .1; // add some speed
                    spawnApple(); // spawn another apple (-s)
                    break;
                }
            }
        }

        // apples spawner
        function spawnApple()
        {
            var
                newApple = {
                    x: ~~(Math.random() * canv.width),
                    y: ~~(Math.random() * canv.height),
                    color: rc()
                };

            // forbit to spawn near the edges
            if (
                    (newApple.x < aw || newApple.x > canv.width - aw)
                    ||
                    (newApple.y < ah || newApple.y > canv.height - ah)
                )
                {
                    spawnApple();
                    return;
                }

            // check for collisions with tail element, so no apple will be spawned in it
            for (var i = 0; i < tail.len");
            WriteLiteral(@"gth; i++)
            {
                if(
                    newApple.x < (trail[i].x + pw)
                    && newApple.x + aw > trail[i].x
                    && newApple.y < (trail[i].y + ph)
                    && newApple.y + ah > trail[i].y
                )
                {
                    // got collision
                    spawnApple();
                    return;
                }
            }
            apples.push(newApple);

            if ( apples.length < 3 && ~~(Math.random() * 1000) > 700 )
            {
                // 30% chance to spawn one more apple
                spawnApple();
            }
        }


        // Randomer for color returned RGB (like '#123456' with '#ABCDEF' )
        function rc() {
            var letters = '0123456789ABCDEF';
            var col = '#';
            for (var i = 0; i < 6; i++) {
                col += letters[Math.floor(Math.random() * 16)];
            }
            return col;
        }
        // ve");
            WriteLiteral(@"locity changer (controls)
        function changeDirection(evt)
        {
            if ( !fkp && [37,38,39,40].indexOf(evt.keyCode) > -1 )
            {
                setTimeout( function() {gs =true;}, 1000);
                fkp = true;
                spawnApple();
            }
            if ( cooldown )
                {return false;}
            //console.log(evt.keyCode);
            /*
                4 directional movement
            */
            if (evt.keyCode == 37 && !(xv > 0) ) // left arrow
                {xv = -speed; yv = 0;}

            if (evt.keyCode == 38 && !(yv > 0) ) // top arrow
                {xv = 0; yv = -speed;}

            if (evt.keyCode == 39 && !(xv < 0) ) // right arrow
                {xv = speed; yv = 0;}

            if (evt.keyCode == 40 && !(yv < 0)) // down arrow
                {xv = 0; yv = speed;}

            cooldown = true;
            setTimeout(function()  {cooldown = false;}, 100);
        }

    </script>
");
            EndContext();
            BeginContext(11317, 2, true);
            WriteLiteral("\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
